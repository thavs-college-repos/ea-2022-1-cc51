hb_lead_time
hb_empty_year <- hb_data[is.na(hb_data$arrival_date_year)]
hb_lead_time <- hb_data[is.na(hb_data$lead_time),]
hb_lead_time
hb_empty_year <- hb_data[is.na(hb_data$arrival_date_year),]
hb_empty_month <- hb_data[is.na(hb_data$arrival_date_day_of_month),]
hb_empty_year
hb_empty_month
View(hb_empty_year)
View(hb_empty_month)
hb_lead_time <- hb_data[is.na(hb_data$lead_time),] # no clue
hb_lead_time
hb_empty_year <- hb_data[is.na(hb_data$arrival_date_year),]
#Change arrival date to last update year
hb_empty_month <- hb_data[is.na(hb_data$arrival_date_day_of_month),]
# We can calculate one . the other one not so much
hb_empty_adults <- hb_data[is.na(hb_data$adults ),]
hb_empty_children <- hb_data[is.na(hb_data$children ),]
hb_empty_babies <- hb_data[is.na(hb_data$babies ),]
View(hb_empty_adults)
columnns_NA_values <- function(x){
count = 0
for(i in 1:ncol(x)) {
if (colSums(is.na(x[i]))){
cat("NA values:",colSums(is.na(x[i])), "   \tColumn",colnames(x[i]),"\n")
count = count + 1
}
}
cat("Columns with NA values: ", count, "\n\n")
}
columnns_wempty_values <- function(x){
count = 0
for(i in 1:ncol(x)) {
if (isTRUE(colSums(x[i]==""))){
cat("NA values:",colSums(x[i]==""), "   \tColumn",colnames(x[i]),"\n")
count = count + 1
}
}
cat("Columns with empty values: ", count)
}
columnns_wnull_values <- function(x){
count = 0
for(i in 1:ncol(x)) {
if (isTRUE(colSums(is.null(x[i])))){
cat("NA values:",colSums(is.null(x[i])), "   \tColumn",colnames(x[i]),"\n")
count = count + 1
}
}
cat("Columns with empty values: ", count)
}
columnns_NA_values(hb_data)
columnns_wempty_values(hb_data)
columnns_NA_values <- function(x){
count = 0
for(i in 1:ncol(x)) {
if (colSums(is.na(x[i]))){
cat("NA values:",colSums(is.na(x[i])), "   \tColumn",colnames(x[i]),"\n")
count = count + 1
}
}
cat("Columns with NA values: ", count, "\n\n")
}
columnns_wempty_values <- function(x){
count = 0
for(i in 1:ncol(x)) {
if (isTRUE(colSums(x[i]==""))){
cat("NA values:",colSums(x[i]==""), "   \tColumn",colnames(x[i]),"\n")
count = count + 1
}
}
cat("Columns with empty values: ", count)
}
columnns_wnull_values <- function(x){
count = 0
for(i in 1:ncol(x)) {
if (isTRUE(colSums(is.null(x[i])))){
cat("NA values:",colSums(is.null(x[i])), "   \tColumn",colnames(x[i]),"\n")
count = count + 1
}
}
cat("Columns with empty values: ", count)
}
columnns_NA_values(hb_data)
columnns_wempty_values(hb_data)
columnns_wnull_values(hb_data)
columnns_NA_values <- function(x){
count = 0
for(i in 1:ncol(x)) {
if (colSums(is.na(x[i]))){
cat("NA values:",colSums(is.na(x[i])), "   \tColumn",colnames(x[i]),"\n")
count = count + 1
}
}
cat("Columns with NA values: ", count, "\n\n")
}
columnns_wempty_values <- function(x){
count = 0
for(i in 1:ncol(x)) {
if (isTRUE(colSums(x[i]==""))){
cat("NA values:",colSums(x[i]==""), "   \tColumn",colnames(x[i]),"\n")
count = count + 1
}
}
cat("Columns with empty values: ", count)
}
columnns_wnull_values <- function(x){
count = 0
for(i in 1:ncol(x)) {
if (colSums(is.na(x[i]))){
cat("NA values:",colSums(is.na(x[i])), "   \tColumn",colnames(x[i]),"\n")
count = count + 1
}
}
cat("Columns with empty values: ", count)
}
columnns_NA_values(hb_data)
columnns_wempty_values(hb_data)
columnns_wnull_values(hb_data)
columnns_NA_values <- function(x){
count = 0
for(i in 1:ncol(x)) {
if (colSums(is.na(x[i]))){
cat("NA values:",colSums(is.na(x[i])), "   \tColumn",colnames(x[i]),"\n")
count = count + 1
}
}
cat("Columns with NA values: ", count, "\n\n")
}
columnns_wempty_values <- function(x){
count = 0
for(i in 1:ncol(x)) {
if (isTRUE(colSums(x[i]==""))){
cat("NA values:",colSums(x[i]==""), "   \tColumn",colnames(x[i]),"\n")
count = count + 1
}
}
cat("Columns with empty values: ", count)
}
columnns_wnull_values <- function(x){
count = 0
for(i in 1:ncol(x)) {
if (colSums(is.na(x[i]))){
cat("NA values:",colSums(is.na(x[i])), "   \tColumn",colnames(x[i]),"\n")
count = count + 1
}
}
cat("Columns with NULL values: ", count)
}
columnns_NA_values(hb_data)
columnns_wempty_values(hb_data)
columnns_wnull_values(hb_data)
columnns_NA_values <- function(x){
count = 0
for(i in 1:ncol(x)) {
if (colSums(is.na(x[i]))){
cat("NA values:",colSums(is.na(x[i])), "   \tColumn",colnames(x[i]),"\n")
count = count + 1
}
}
cat("Columns with NA values: ", count, "\n\n")
}
columnns_wempty_values <- function(x){
count = 0
for(i in 1:ncol(x)) {
if (isTRUE(colSums(x[i]==""))){
cat("NA values:",colSums(x[i]==""), "   \tColumn",colnames(x[i]),"\n")
count = count + 1
}
}
cat("Columns with empty values: ", count, "\n\n")
}
columnns_wnull_values <- function(x){
count = 0
for(i in 1:ncol(x)) {
if (colSums(is.na(x[i]))){
cat("NA values:",colSums(is.na(x[i])), "   \tColumn",colnames(x[i]),"\n")
count = count + 1
}
}
cat("Columns with NULL values: ", count)
}
columnns_NA_values(hb_data)
columnns_wempty_values(hb_data)
columnns_wnull_values(hb_data)
hb_data <- hotel_bookings
hotel_bookings <- read.csv("hotel_bookings_miss.csv", header=TRUE, stringsAsFactors = FALSE)
names(hotel_bookings)[names(hotel_bookings) == 'Ã¯..hotel'] <- 'hotel'
head(hotel_bookings, 10)
tail(hotel_bookings, 10)
hb_data <- hotel_bookings
hb_data$is_canceled <- as.factor(hb_data$is_canceled)
hb_data$arrival_date_week_number <- as.factor(hb_data$arrival_date_week_number)
hb_data$arrival_date_year <- as.factor(hb_data$arrival_date_year)
hb_data$arrival_date_month <- as.factor(hb_data$arrival_date_month)
hb_data$arrival_date_day_of_month  <- as.factor(hb_data$arrival_date_day_of_month)
hb_data$is_repeated_guest <- as.factor(hb_data$is_repeated_guest)
hb_data$reserved_room_type <- as.factor(hb_data$reserved_room_type)
hb_data$assigned_room_type <- as.factor(hb_data$assigned_room_type)
hb_data$deposit_type <- as.factor(hb_data$deposit_type)
hb_data$agent <- as.factor(hb_data$agent)
hb_data$customer_type <- as.factor(hb_data$customer_type)
hb_data$reservation_status_date <- as.Date(hb_data$reservation_status_date, "%m/%d/%Y")
hb_data[sapply(hotel_data, is.character)] <-
lapply(hotel_data[sapply(hotel_data, is.character)], as.factor)
hb_data <- hotel_bookings
hb_data$is_canceled <- as.factor(hb_data$is_canceled)
hb_data$arrival_date_week_number <- as.factor(hb_data$arrival_date_week_number)
hb_data$arrival_date_year <- as.factor(hb_data$arrival_date_year)
hb_data$arrival_date_month <- as.factor(hb_data$arrival_date_month)
hb_data$arrival_date_day_of_month  <- as.factor(hb_data$arrival_date_day_of_month)
hb_data$is_repeated_guest <- as.factor(hb_data$is_repeated_guest)
hb_data$reserved_room_type <- as.factor(hb_data$reserved_room_type)
hb_data$assigned_room_type <- as.factor(hb_data$assigned_room_type)
hb_data$deposit_type <- as.factor(hb_data$deposit_type)
hb_data$agent <- as.factor(hb_data$agent)
hb_data$customer_type <- as.factor(hb_data$customer_type)
hb_data$reservation_status_date <- as.Date(hb_data$reservation_status_date, "%m/%d/%Y")
hb_data[sapply(hb_data, is.character)] <-
lapply(hb_data[sapply(hb_data, is.character)], as.factor)
str(hb_data)
View(hb_empty_babies)
View(hb_empty_children)
table(hb_data$hotel)
table(hb_data$hotel)
# Visualize the distribution
ggplot(data = hotel_data, aes(x = hotel)) +
geom_bar(stat = "count") +
labs(title = "Booking Request by Hotel type",
x = "Hotel type",
y = "No. of bookings") +
theme_classic() + scale_color_brewer(palette = "Set2")
# Hotel Booking Exploratory Data Analysis
# Load all the required library
library(ggplot2)
library(dplyr)
library(scales)
library(tidyverse)
# Load all the required library
library(ggplot2)
library(dplyr)
library(scales)
# Cargar las librerias relevantes
library(ggplot2)
library(dplyr)
library(scales)
table(hb_data$hotel)
# Visualize the distribution
ggplot(data = hotel_data, aes(x = hotel)) +
geom_bar(stat = "count") +
labs(title = "Booking Request by Hotel type",
x = "Hotel type",
y = "No. of bookings") +
theme_classic() + scale_color_brewer(palette = "Set2")
table(hb_data$hotel)
# Visualize the distribution
ggplot(data = hb_data, aes(x = hotel)) +
geom_bar(stat = "count") +
labs(title = "Booking Request by Hotel type",
x = "Hotel type",
y = "No. of bookings") +
theme_classic() + scale_color_brewer(palette = "Set2")
table(hb_data$hotel)
# Visualize the distribution
ggplot(data = hb_data, aes(x = hotel)) +
geom_bar(stat = "count") +
labs(title = "Booking Request by Hotel type",
x = "Hotel type",
y = "No. of bookings") +
theme_classic() + scale_color_brewer(palette = "Set2")
# Check the distribution of hotel type for cancellation
table(hotel_data$is_canceled, hotel_data$hotel)
# Check the distribution of hotel type for cancellation
table(hb_data$is_canceled, hb_data$hotel)
# Visualize the cancellation by hotel type
ggplot(data = hb_data,
aes(
x = hotel,
y = prop.table(stat(count)),
fill = factor(is_canceled),
label = scales::percent(prop.table(stat(count)))
)) +
geom_bar(position = position_dodge()) +
geom_text(
stat = "count",
position = position_dodge(.9),
vjust = -0.5,
size = 3
) +
scale_y_continuous(labels = scales::percent) +
labs(title = "Cancellation Status by Hotel Type",
x = "Hotel Type",
y = "Count") +
theme_classic() +
scale_fill_discrete(
name = "Booking Status",
breaks = c("0", "1"),
labels = c("Cancelled", "Not Cancelled")
)
ggplot(data = hotel_data, aes(
x = hotel,
y = lead_time,
fill = factor(is_canceled)
)) +
geom_boxplot(position = position_dodge()) +
labs(
title = "Cancellation By Hotel Type",
subtitle = "Based on Lead Time",
x = "Hotel Type",
y = "Lead Time (Days)"
) +
scale_fill_discrete(
name = "Booking Status",
breaks = c("0", "1"),
labels = c("Cancelled", "Not Cancelled")
) + theme_light()
ggplot(data = hb_data, aes(
x = hotel,
y = lead_time,
fill = factor(is_canceled)
)) +
geom_boxplot(position = position_dodge()) +
labs(
title = "Cancellation By Hotel Type",
subtitle = "Based on Lead Time",
x = "Hotel Type",
y = "Lead Time (Days)"
) +
scale_fill_discrete(
name = "Booking Status",
breaks = c("0", "1"),
labels = c("Cancelled", "Not Cancelled")
) + theme_light()
ggplot(data = hb_data, aes(
x = hotel,
y = lead_time,
fill = factor(is_canceled)
)) +
geom_boxplot(position = position_dodge()) +
labs(
title = "Cancellation By Hotel Type",
subtitle = "Based on Lead Time",
x = "Hotel Type",
y = "Lead Time (Days)"
) +
scale_fill_discrete(
name = "Booking Status",
breaks = c("0", "1"),
labels = c("Cancelled", "Not Cancelled")
) + theme_light()
ggplot(data = hb_data, aes(
x = hotel,
y = lead_time,
fill = factor(is_canceled)
)) +
geom_boxplot(position = position_dodge()) +
labs(
title = "Cancellation By Hotel Type",
subtitle = "Based on Lead Time",
x = "Hotel Type",
y = "Lead Time (Days)"
) +
scale_fill_discrete(
name = "Booking Status",
breaks = c("0", "1"),
labels = c("Cancelled", "Not Cancelled")
) + theme_light()
unique(hotel_data$arrival_date_year)
unique(hotel_data$arrival_date_year)
# Organize the Month in proper order
hb_data$arrival_date_month <-
factor(hotel_data$arrival_date_month, levels = month.name)
# Organize the Month in proper order
hb_data$arrival_date_month <-
factor(hb_data$arrival_date_month, levels = month.name)
# Visualize Hotel traffic on Monthly basis
ggplot(data = hb_data, aes(x = arrival_date_month)) +
geom_bar(fill = "steelblue") +
geom_text(stat = "count", aes(label = ..count..), hjust = 1) +
coord_flip() + labs(title = "Month Wise Booking Request",
x = "Month",
y = "Count") +
theme_classic()
ggplot(hotel_data, aes(arrival_date_month, fill = hotel)) +
geom_bar(position = position_dodge()) +
labs(title = "Booking Status by Month",
x = "Month",
y = "Count") + theme_bw()
ggplot(hb_data, aes(arrival_date_month, fill = hotel)) +
geom_bar(position = position_dodge()) +
labs(title = "Booking Status by Month",
x = "Month",
y = "Count") + theme_bw()
ggplot(hotel_data, aes(arrival_date_month, fill = factor(is_canceled))) +
geom_bar() + geom_text(stat = "count", aes(label = ..count..), hjust = 1) +
coord_flip() + scale_fill_discrete(
name = "Booking Status",
breaks = c("0", "1"),
label = c("Cancelled", "Not Cancelled")
) +
labs(title = "Booking Status by Month",
x = "Month",
y = "Count") + theme_bw()
ggplot(hb_data, aes(arrival_date_month, fill = factor(is_canceled))) +
geom_bar() + geom_text(stat = "count", aes(label = ..count..), hjust = 1) +
coord_flip() + scale_fill_discrete(
name = "Booking Status",
breaks = c("0", "1"),
label = c("Cancelled", "Not Cancelled")
) +
labs(title = "Booking Status by Month",
x = "Month",
y = "Count") + theme_bw()
columnns_NA_values <- function(x){
count = 0
for(i in 1:ncol(x)) {
if (colSums(is.na(x[i]))){
cat("NA values:",colSums(is.na(x[i])), "   \tColumn",colnames(x[i]),"\n")
count = count + 1
}
}
cat("Columns with NA values: ", count, "\n\n")
}
columnns_wempty_values <- function(x){
count = 0
for(i in 1:ncol(x)) {
if (isTRUE(colSums(x[i]==""))){
cat("NA values:",colSums(x[i]==""), "   \tColumn",colnames(x[i]),"\n")
count = count + 1
}
}
cat("Columns with empty values: ", count, "\n\n")
}
columnns_wnull_values <- function(x){
count = 0
for(i in 1:ncol(x)) {
if (colSums(is.null(x[i]))){
cat("NA values:",colSums(is.null(x[i])), "   \tColumn",colnames(x[i]),"\n")
count = count + 1
}
}
cat("Columns with NULL values: ", count)
}
columnns_NA_values(hb_data)
columnns_wempty_values(hb_data)
columnns_wnull_values(hb_data)
columnns_NA_values <- function(x){
count = 0
for(i in 1:ncol(x)) {
if (colSums(is.na(x[i]))){
cat("NA values:",colSums(is.na(x[i])), "   \tColumn",colnames(x[i]),"\n")
count = count + 1
}
}
cat("Columns with NA values: ", count, "\n\n")
}
columnns_wempty_values <- function(x){
count = 0
for(i in 1:ncol(x)) {
if (isTRUE(colSums(x[i]==""))){
cat("NA values:",colSums(x[i]==""), "   \tColumn",colnames(x[i]),"\n")
count = count + 1
}
}
cat("Columns with empty values: ", count, "\n\n")
}
columnns_wnull_values <- function(x){
count = 0
for(i in 1:ncol(x)) {
if (colSums(is.null(x))){
cat("NA values:",colSums(is.null(x[i])), "   \tColumn",colnames(x[i]),"\n")
count = count + 1
}
}
cat("Columns with NULL values: ", count)
}
columnns_NA_values(hb_data)
columnns_wempty_values(hb_data)
columnns_wnull_values(hb_data)
columnns_NA_values <- function(x){
count = 0
for(i in 1:ncol(x)) {
if (colSums(is.na(x[i]))){
cat("NA values:",colSums(is.na(x[i])), "   \tColumn",colnames(x[i]),"\n")
count = count + 1
}
}
cat("Columns with NA values: ", count, "\n\n")
}
columnns_wempty_values <- function(x){
count = 0
for(i in 1:ncol(x)) {
if (isTRUE(colSums(x[i]==""))){
cat("NA values:",colSums(x[i]==""), "   \tColumn",colnames(x[i]),"\n")
count = count + 1
}
}
cat("Columns with empty values: ", count, "\n\n")
}
columnns_wnull_values <- function(x){
count = 0
for(i in 1:ncol(x)) {
if (is.null(x[i])){
cat("NA values:",colSums(is.null(x[i])), "   \tColumn",colnames(x[i]),"\n")
count = count + 1
}
}
cat("Columns with NULL values: ", count)
}
columnns_NA_values(hb_data)
columnns_wempty_values(hb_data)
columnns_wnull_values(hb_data)
View(hb_data)
